name: Branch Protection and CI/CD Setup

on:
  push:
    branches: [ main, dev, local ]
  pull_request:
    branches: [ main, dev ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Branch Protection Rules
  branch-protection:
    runs-on: ubuntu-latest
    steps:
      - name: Set up branch protection for main
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main',
              required_status_checks: {
                strict: true,
                contexts: ['test', 'security-scan', 'code-quality']
              },
              enforce_admins: true,
              required_pull_request_reviews: {
                required_approving_review_count: 2,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: true
              },
              restrictions: {
                users: [],
                teams: ['maintainers']
              },
              allow_force_pushes: false,
              allow_deletions: false
            })

      - name: Set up branch protection for dev
        if: github.ref == 'refs/heads/dev'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'dev',
              required_status_checks: {
                strict: true,
                contexts: ['test', 'security-scan']
              },
              enforce_admins: false,
              required_pull_request_reviews: {
                required_approving_review_count: 1,
                dismiss_stale_reviews: true
              },
              restrictions: {
                users: [],
                teams: ['developers']
              },
              allow_force_pushes: false,
              allow_deletions: false
            })

  # Environment-specific CI/CD
  ci-cd:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [local, dev, prod]
        include:
          - environment: local
            branch: local
            dockerfile: ./Dockerfile
          - environment: dev
            branch: dev
            dockerfile: ./Dockerfile
          - environment: prod
            branch: main
            dockerfile: ./Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          echo "Setting up ${{ matrix.environment }} environment"
          cp env.${{ matrix.environment }} .env
          echo "ENVIRONMENT=${{ matrix.environment }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run tests
        run: |
          echo "Running tests for ${{ matrix.environment }} environment"
          # Add your test commands here
          make test

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Environment-specific deployment
  deploy:
    needs: ci-cd
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "Setting up production environment"
            cp env.production .env
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "Setting up development environment"
            cp env.development .env
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi

      - name: Deploy to Kubernetes
        run: |
          echo "Deploying to ${{ env.ENVIRONMENT }} environment"
          # Add your deployment commands here
          if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
            make k8s-apply-prod
          else
            make k8s-apply-dev
          fi

  # Environment switching test
  test-environment-switching:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test local environment
        run: |
          echo "Testing local environment setup"
          cp env.local .env
          make env-switch ENV=local
          echo "Local environment test completed"

      - name: Test dev environment
        run: |
          echo "Testing dev environment setup"
          cp env.development .env
          make env-switch ENV=dev
          echo "Dev environment test completed"

      - name: Test production environment
        run: |
          echo "Testing production environment setup"
          cp env.production .env
          make env-switch ENV=prod
          echo "Production environment test completed" 