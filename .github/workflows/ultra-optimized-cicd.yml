name: 🚀 Ultra-Optimized CI/CD Pipeline

on:
  push:
    branches: [main, develop, "feature/*", "hotfix/*"]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 6 * * 1" # Weekly security scan on Mondays at 6 AM UTC
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: "Force deployment even if tests fail"
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  POSTGRES_VERSION: "15"
  REDIS_VERSION: "7"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =====================================================
  # SECURITY & VULNERABILITY SCANNING
  # =====================================================
  security-scan:
    name: 🔒 Security & Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "1"

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: 🔐 Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/python
            p/typescript
            p/docker
            p/kubernetes
            p/security-audit
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: 🕵️ Secret scanning with GitLeaks
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: ✅ Security check summary
        id: security-check
        run: |
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "🔒 Security scans completed successfully"

  # =====================================================
  # CODE QUALITY & LINTING
  # =====================================================
  code-quality:
    name: 📋 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        component:
          [frontend, backend, ai-service, analytics-service, data-service]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        if: matrix.component != 'frontend'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Setup Node.js
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      # Backend linting
      - name: 🔍 Python linting (Black, isort, flake8, mypy)
        if: matrix.component != 'frontend'
        run: |
          cd services/${{ matrix.component }}

          # Install dependencies
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy bandit safety

          # Format check with Black
          echo "🎨 Running Black formatter..."
          black --check --diff .

          # Import sorting with isort
          echo "📦 Running isort..."
          isort --check-only --diff .

          # Linting with flake8
          echo "🔍 Running flake8..."
          flake8 . --max-line-length=120 --extend-ignore=E203,W503

          # Type checking with mypy
          echo "🔍 Running mypy..."
          mypy . --ignore-missing-imports --strict-optional

          # Security linting with bandit
          echo "🔒 Running bandit security analysis..."
          bandit -r . -f json -o bandit-report.json || true

          # Dependency vulnerability check
          echo "🛡️ Checking dependencies for vulnerabilities..."
          safety check --json --output safety-report.json || true

      # Frontend linting
      - name: 🔍 Frontend linting (ESLint, TypeScript, Prettier)
        if: matrix.component == 'frontend'
        run: |
          cd frontend

          # Install dependencies
          npm ci

          # TypeScript compilation check
          echo "🔍 Running TypeScript compiler..."
          npx tsc --noEmit

          # ESLint
          echo "🔍 Running ESLint..."
          npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0

          # Prettier format check
          echo "🎨 Running Prettier..."
          npx prettier --check .

          # Next.js build check
          echo "🏗️ Running Next.js build check..."
          npm run build

      - name: 📊 Upload code quality reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-${{ matrix.component }}
          path: |
            **/bandit-report.json
            **/safety-report.json
            **/eslint-report.json
          retention-days: 30

  # =====================================================
  # COMPREHENSIVE TESTING SUITE
  # =====================================================
  testing:
    name: 🧪 Comprehensive Testing Suite
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [security-scan, code-quality]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_bookstore
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      weaviate:
        image: semitechnologies/weaviate:latest
        env:
          QUERY_DEFAULTS_LIMIT: 25
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
          PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
          DEFAULT_VECTORIZER_MODULE: "none"
          ENABLE_MODULES: "text2vec-openai,text2vec-cohere,text2vec-huggingface"
        ports:
          - 8080:8080

    strategy:
      matrix:
        test-type: [unit, integration, e2e, performance]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: 🔧 Install backend dependencies
        run: |
          cd services/api-server
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-asyncio pytest-mock pytest-benchmark

      - name: 🔧 Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: 🏗️ Setup test environment
        run: |
          # Copy test environment file
          cp env.local .env

          # Set test database URL
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_bookstore" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "WEAVIATE_URL=http://localhost:8080" >> .env

          # Add test API keys
          echo "GEMINI_API_KEY=test_key" >> .env
          echo "SECRET_KEY=test_secret_key_for_testing_only" >> .env

      # Unit Tests
      - name: 🧪 Backend Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          cd services/api-server
          python -m pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=95 \
            --junitxml=junit.xml \
            -v \
            --tb=short \
            --maxfail=10

      - name: 🧪 Frontend Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          cd frontend
          npm run test -- --coverage --watchAll=false --maxWorkers=2

      # Integration Tests
      - name: 🔗 Integration Tests
        if: matrix.test-type == 'integration'
        run: |
          cd services/api-server
          python -m pytest tests/test_integration.py \
            --cov=app \
            --cov-report=xml \
            --junitxml=integration-junit.xml \
            -v \
            --tb=short

      # Performance Tests
      - name: ⚡ Performance Tests
        if: matrix.test-type == 'performance'
        run: |
          cd services/api-server
          python -m pytest tests/test_performance_benchmarks.py \
            --benchmark-only \
            --benchmark-json=benchmark.json \
            --benchmark-sort=mean \
            -v

      # E2E Tests
      - name: 🎭 E2E Tests with Playwright
        if: matrix.test-type == 'e2e'
        run: |
          cd frontend

          # Install Playwright browsers
          npx playwright install --with-deps

          # Start API server in background
          cd ../services/api-server
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          API_PID=$!

          # Wait for API to be ready
          sleep 10

          # Start frontend in background
          cd ../../frontend
          npm run build
          npm run start &
          FRONTEND_PID=$!

          # Wait for frontend to be ready
          sleep 15

          # Run E2E tests
          npx playwright test --reporter=html

          # Cleanup
          kill $API_PID $FRONTEND_PID || true

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            **/coverage.xml
            **/htmlcov/
            **/junit.xml
            **/benchmark.json
            **/playwright-report/
          retention-days: 30

      - name: 📈 Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          files: ./services/api-server/coverage.xml,./frontend/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # =====================================================
  # DOCKER IMAGE BUILDING
  # =====================================================
  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [testing]
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        service:
          [frontend, api-server, ai-service, analytics-service, data-service]

    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            BUILD_REVISION=${{ github.sha }}
            BUILD_VERSION=${{ github.ref_name }}

      - name: 🔍 Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: "sarif"
          output: "trivy-image-results.sarif"

      - name: 📊 Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-image-results.sarif"

  # =====================================================
  # KUBERNETES DEPLOYMENT
  # =====================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-images]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: 🔐 Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: 🏗️ Deploy to staging with Kustomize
        run: |
          cd k8s/overlays/staging

          # Update image tags
          kustomize edit set image \
            frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }} \
            api-server=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server:${{ github.sha }} \
            ai-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-service:${{ github.sha }} \
            analytics-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/analytics-service:${{ github.sha }} \
            data-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/data-service:${{ github.sha }}

          # Apply configuration
          kubectl apply -k . --record

          # Wait for rollout
          kubectl rollout status deployment/frontend -n bookstore --timeout=600s
          kubectl rollout status deployment/api-server -n bookstore --timeout=600s
          kubectl rollout status deployment/ai-service -n bookstore --timeout=600s
          kubectl rollout status deployment/analytics-service -n bookstore --timeout=600s

      - name: 🧪 Run smoke tests
        run: |
          # Get service URLs
          FRONTEND_URL=$(kubectl get service frontend -n bookstore -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          API_URL=$(kubectl get service api-server -n bookstore -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          # Wait for services to be ready
          sleep 30

          # Health checks
          curl -f http://$API_URL/health || exit 1
          curl -f http://$API_URL/monitoring/health || exit 1
          curl -f http://$FRONTEND_URL/ || exit 1

          # Basic API functionality tests
          curl -f http://$API_URL/books?limit=1 || exit 1

          echo "✅ Smoke tests passed"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-images, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: 🔐 Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: 🗃️ Database migration
        run: |
          # Run database migrations in production
          kubectl create job migration-${{ github.run_number }} \
            --from=cronjob/database-migration \
            -n bookstore

          # Wait for migration to complete
          kubectl wait --for=condition=complete job/migration-${{ github.run_number }} \
            -n bookstore --timeout=600s

      - name: 🚀 Blue-Green deployment
        run: |
          cd k8s/overlays/production

          # Update image tags
          kustomize edit set image \
            frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }} \
            api-server=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server:${{ github.sha }} \
            ai-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-service:${{ github.sha }} \
            analytics-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/analytics-service:${{ github.sha }} \
            data-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/data-service:${{ github.sha }}

          # Create blue-green deployment
          kubectl apply -k . --record

          # Wait for new deployment to be ready
          kubectl rollout status deployment/frontend-green -n bookstore --timeout=600s
          kubectl rollout status deployment/api-server-green -n bookstore --timeout=600s

          # Run production smoke tests
          sleep 30

          # Switch traffic to green deployment
          kubectl patch service frontend -n bookstore -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service api-server -n bookstore -p '{"spec":{"selector":{"version":"green"}}}'

          # Wait for traffic switch
          sleep 60

          # Scale down blue deployment
          kubectl scale deployment frontend-blue --replicas=0 -n bookstore
          kubectl scale deployment api-server-blue --replicas=0 -n bookstore

          echo "✅ Blue-green deployment completed"

      - name: 🔍 Post-deployment monitoring
        run: |
          # Wait 5 minutes and check error rates
          sleep 300

          # Check error rates from monitoring
          ERROR_RATE=$(kubectl exec -n bookstore deployment/api-server -- \
            curl -s http://localhost:8000/monitoring/metrics | \
            grep http_requests_total | grep "status_code=\"5" | \
            tail -1 | awk '{print $2}')

          if [ "${ERROR_RATE:-0}" -gt 10 ]; then
            echo "❌ High error rate detected: $ERROR_RATE"
            # Rollback
            kubectl rollout undo deployment/frontend -n bookstore
            kubectl rollout undo deployment/api-server -n bookstore
            exit 1
          fi

          echo "✅ Post-deployment checks passed"

  # =====================================================
  # NOTIFICATION & REPORTING
  # =====================================================
  notify:
    name: 📢 Notifications & Reporting
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: 📊 Generate deployment report
        run: |
          cat << EOF > deployment-report.md
          # 🚀 Deployment Report

          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Triggered by:** ${{ github.actor }}
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}

          ## 📈 Results
          - **Security Scan:** ${{ needs.security-scan.result }}
          - **Code Quality:** ${{ needs.code-quality.result }}
          - **Testing:** ${{ needs.testing.result }}
          - **Build Images:** ${{ needs.build-images.result }}
          - **Deploy Staging:** ${{ needs.deploy-staging.result }}
          - **Deploy Production:** ${{ needs.deploy-production.result }}

          ## 🔗 Links
          - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

          EOF

      - name: 💬 Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ job.status == 'success' && 'good' || job.status == 'failure' && 'danger' || 'warning' }}",
                "title": "🚀 Deployment ${{ job.status == 'success' && 'Successful' || 'Failed' }}",
                "fields": [
                  {"title": "Repository", "value": "${{ github.repository }}", "short": true},
                  {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Actor", "value": "${{ github.actor }}", "short": true}
                ],
                "actions": [{
                  "type": "button",
                  "text": "View Workflow",
                  "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }]
              }]
            }

      - name: 📧 Email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 Deployment Failed: ${{ github.repository }}"
          body: |
            Deployment failed for commit ${{ github.sha }} on branch ${{ github.ref_name }}.

            Please check the workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.ALERT_EMAIL }}
          from: Bookstore CI/CD <${{ secrets.EMAIL_FROM }}>

  # =====================================================
  # CLEANUP & MAINTENANCE
  # =====================================================
  cleanup:
    name: 🧹 Cleanup & Maintenance
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()

    steps:
      - name: 🗑️ Clean up old Docker images
        run: |
          # Remove old images from registry (keep last 10)
          echo "Cleaning up old Docker images..."
          # Implementation would depend on registry API

      - name: 📊 Update deployment metrics
        run: |
          # Update deployment success/failure metrics
          curl -X POST "${{ secrets.METRICS_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployment_id": "${{ github.run_id }}",
              "status": "${{ job.status }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }'

      - name: 🎯 Performance baseline update
        if: success()
        run: |
          # Update performance baselines for regression testing
          echo "Updating performance baselines..."
          # Implementation would store current performance metrics
