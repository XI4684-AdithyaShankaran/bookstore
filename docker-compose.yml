version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: bookstore_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bookstore_db}
      POSTGRES_USER: ${POSTGRES_USER:-bookstore_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bookstore_pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bookstore_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=2
      -c max_parallel_workers_per_gather=1
      -c max_parallel_workers=2
      -c max_parallel_maintenance_workers=1

  redis:
    image: redis:7-alpine
    container_name: bookstore_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --dir /data
      --dbfilename dump.rdb
      --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped

  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: bookstore_weaviate
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_CROSS_ORIGIN: 'true'
      LOG_LEVEL: 'info'
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # API Server (Main Backend)
  api-server:
    build:
      context: ./services/api-server
      dockerfile: Dockerfile
    container_name: bookstore_api_server
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bookstore_user}:${POSTGRES_PASSWORD:-bookstore_pass}@postgres:5432/${POSTGRES_DB:-bookstore_db}
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-5}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - MAX_REQUESTS_PER_MINUTE=${MAX_REQUESTS_PER_MINUTE:-500}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: bookstore_analytics_service
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bookstore_user}:${POSTGRES_PASSWORD:-bookstore_pass}@postgres:5432/${POSTGRES_DB:-bookstore_db}
      - REDIS_URL=redis://redis:6379
      - ANALYTICS_ENABLED=${ANALYTICS_ENABLED:-true}
      - RAGAS_EVALUATION_ENABLED=${RAGAS_EVALUATION_ENABLED:-true}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-all-MiniLM-L6-v2}
      - ANALYTICS_BATCH_SIZE=${ANALYTICS_BATCH_SIZE:-50}
      - FAITHFULNESS_THRESHOLD=${FAITHFULNESS_THRESHOLD:-0.7}
      - RELEVANCY_THRESHOLD=${RELEVANCY_THRESHOLD:-0.6}
      - RECALL_THRESHOLD=${RECALL_THRESHOLD:-0.5}
      - DIVERSITY_THRESHOLD=${DIVERSITY_THRESHOLD:-0.3}
      - SIMILARITY_THRESHOLD=${SIMILARITY_THRESHOLD:-0.6}
      - RATING_WEIGHT=${RATING_WEIGHT:-0.6}
      - PAGES_WEIGHT=${PAGES_WEIGHT:-0.2}
      - YEAR_WEIGHT=${YEAR_WEIGHT:-0.2}
      - ANALYTICS_REPORT_DIR=${ANALYTICS_REPORT_DIR:-analytics}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  # AI Service (MCP Server)
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    container_name: bookstore_ai_service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bookstore_user}:${POSTGRES_PASSWORD:-bookstore_pass}@postgres:5432/${POSTGRES_DB:-bookstore_db}
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  # Data Service (Data Loading)
  data-service:
    build:
      context: ./services/data-service
      dockerfile: Dockerfile
    container_name: bookstore_data_service
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bookstore_user}:${POSTGRES_PASSWORD:-bookstore_pass}@postgres:5432/${POSTGRES_DB:-bookstore_db}
      - KAGGLE_USERNAME=${KAGGLE_USERNAME}
      - KAGGLE_KEY=${KAGGLE_KEY}
      - KAGGLE_DATASET_ID=${KAGGLE_DATASET_ID:-saurabhbagchi/books-dataset}
      - KAGGLE_DATASET_VERSION=${KAGGLE_DATASET_VERSION:-1}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bookstore_frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      api-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped

  # Database Admin (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: bookstore_pgadmin
    environment:
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD: 'admin'
      PGADMIN_CONFIG_MASTER_EMAIL: 'admin@bookstore.com'
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
