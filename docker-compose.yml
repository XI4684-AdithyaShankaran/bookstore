version: "3.8"

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: bookstore_postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-bookstore_db}
      - POSTGRES_USER=${POSTGRES_USER:-bookstore_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bookstore_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-bookstore_user} -d ${POSTGRES_DB:-bookstore_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: bookstore_redis
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: bookstore_weaviate
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ETL Service (Data Loading)
  etl-service:
    build:
      context: ./services/etl-service
      dockerfile: Dockerfile
    container_name: bookstore_etl_service
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bookstore_user}:${POSTGRES_PASSWORD:-bookstore_pass}@postgres:5432/${POSTGRES_DB:-bookstore_db}
      - KAGGLE_USERNAME=${KAGGLE_USERNAME}
      - KAGGLE_KEY=${KAGGLE_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - etl
    restart: "no"

  # Backend Service (Main API)
  backend-service:
    build:
      context: ./services/backend-service
      dockerfile: Dockerfile
    container_name: bookstore_backend_service
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bookstore_user}:${POSTGRES_PASSWORD:-bookstore_pass}@postgres:5432/${POSTGRES_DB:-bookstore_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-bookstore_redis_pass}@redis:6379/0
      - WEAVIATE_URL=http://weaviate:8080
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-all-MiniLM-L6-v2}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI/ML Service (Consolidated - Recommendations, Analytics, Agentic Tools & Web Search)
  ai-ml-service:
    build:
      context: ./services/ai-ml-service
      dockerfile: Dockerfile
    container_name: bookstore_ai_ml_service
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bookstore_user}:${POSTGRES_PASSWORD:-bookstore_pass}@postgres:5432/${POSTGRES_DB:-bookstore_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-bookstore_redis_pass}@redis:6379/0
      - WEAVIATE_URL=http://weaviate:8080
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-all-MiniLM-L6-v2}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: bookstore_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8000
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      backend-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  weaviate_data:

networks:
  default:
    name: bookstore_network
